(function() {
  define(['kinvey', 'chance'], function(Kinvey) {
    return function(route) {
      return $.Deferred(function(deferred) {
        var allow, autoAccount, autoPassword, autoUsername, deny, logger, login, offline, online, user;
        if (route && route.options && route.options.logger) {
          logger = route.options.logger;
        } else {
          logger = console;
        }
        allow = function(event) {
          route.trigger(event, route);
          route.trigger('allow', route);
          return deferred.resolve();
        };
        deny = function(event) {
          route.trigger(event, route);
          route.trigger('deny', route);
          return deferred.reject();
        };
        autoAccount = function(credentials) {
          logger.info('Creating new autogenerated account', credentials);
          return user.save(credentials, {
            success: function(model, response, options) {
              logger.info('Account created successfully', response);
              return allow('allow:created');
            },
            error: function(model, xhr, options) {
              logger.error('Failed to create account', xhr);
              route.pushError(xhr);
              return deny('deny:error');
            }
          });
        };
        autoUsername = function() {
          return chance.guid();
        };
        autoPassword = function() {
          return chance.hash();
        };
        login = function(credentials) {
          return user.login(credentials).then(function() {
            if (user.isLoggedIn()) {
              return allow('allow:user');
            } else {
              return deny('deny:user');
            }
          }, function(error) {
            logger.error('Failed to login with credentials', error);
            route.pushError(error);
            return deny('deny:error');
          });
        };
        online = function() {
          var _this = this;
          Kinvey.Sync.online();
          return Kinvey.init(route.options.kinvey).then(function(activeUser) {
            var cache, error, password, username;
            if (activeUser) {
              logger.info('Already logged in', activeUser);
              return allow('allow:user');
            } else {
              cache = Kinvey.Backbone.User.accountCache;
              username = cache.getUsername();
              password = cache.getPassword();
              if (username && password) {
                logger.info('Logging in with cached credentials', username, password);
                return login({
                  username: username,
                  password: password
                });
              } else {
                logger.info('Not logged in, no cached credentials');
                if (route.options.allowGuest) {
                  return allow('allow:guest');
                } else {
                  if (route.options.autoAccount) {
                    try {
                      return autoAccount({
                        username: autoUsername(),
                        password: autoPassword()
                      });
                    } catch (_error) {
                      error = _error;
                      logger.trace(error);
                      return deny('deny:guest');
                    }
                  } else {
                    return deny('deny:guest');
                  }
                }
              }
            }
          }, function(error) {
            logger.error('Kinvey init error', error);
            route.pushError(error);
            return deny('deny:error');
          });
        };
        offline = function() {
          var options,
            _this = this;
          Kinvey.Sync.offline();
          if (route.options.allowOffline) {
            options = _.clone(route.options.kinvey);
            options.online = false;
            return Kinvey.init(options).then(function(activeUser) {
              if (Kinvey.Backbone.getActiveUser()) {
                return allow('allow:offline');
              } else {
                if (route.options.allowGuest) {
                  return allow('allow:guest');
                } else {
                  return deny('deny:guest');
                }
              }
            }, function(error) {
              logger.error('Kinvey init error', error);
              route.pushError(error);
              return deny('deny:error');
            });
          } else {
            return deny('deny:offline');
          }
        };
        user = new Kinvey.Backbone.User;
        if (route.options.online()) {
          return online();
        } else {
          return offline();
        }
      }).promise();
    };
  });

}).call(this);
